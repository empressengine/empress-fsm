(function(n,a){typeof exports=="object"&&typeof module<"u"?a(exports,require("empress-core"),require("empress-store")):typeof define=="function"&&define.amd?define(["exports","empress-core","empress-store"],a):(n=typeof globalThis<"u"?globalThis:n||self,a(n.EmpressFSM={},n.empressCore,n.empressStore))})(this,function(n,a,S){"use strict";var u=(h=>(h.Stop="stop",h.Wait="wait",h))(u||{});class d{constructor(t,e){this._executionController=t,this._currentExecutionId="",this._storeStates=[],this._transitionPromise=null,this._name=e.name,this._storeAdapter=e.store,this._states=new Map,this._hooks=e.hooks,this._currentState=e.initialState,e.states.forEach(s=>{this._states.set(s.name,s)}),this._storeAdapter.subscribe(async()=>{this.addStoreData(this._storeAdapter),this.processTransition()})}get name(){return this._name}get storeAdapter(){return this._storeAdapter}get store(){return console.warn("FSM.store is deprecated. Use FSM.storeAdapter instead."),{cloneState:()=>this._storeAdapter.getState(),clonePrevState:()=>this._storeAdapter.getPrevState(),update:t=>this._storeAdapter.update(t)}}get currentState(){return this._currentState}get states(){return this._states}get hooks(){return this._hooks||{}}async start(){var s;const t=this._states.get(this._currentState);if(!t)throw new Error(`Initial state '${this._currentState}' not found`);this.addStoreData(this._storeAdapter),this._transitionPromise=new a.DeferredPromise;const e=this.getStoreData();e&&(await this.processOnEnter(this._currentState,"",e),t.subStates&&await t.subStates.start(),this._currentStateData=e,(s=this._transitionPromise)==null||s.resolve(),await this.processTransition())}async stop(){var e;const t=this._states.get(this._currentState);t&&(this._executionController.stop(this._currentExecutionId),(e=this._transitionPromise)==null||e.resolve(),this.processOnExit(this._currentState,this._currentStateData),t.subStates&&await t.subStates.stop(),this._storeAdapter.unsubscribe())}async update(t){var s;const e=this._states.get(this._currentState);(e==null?void 0:e.transitionStrategy)===u.Stop&&this._executionController.stop(this._currentExecutionId),await((s=this._transitionPromise)==null?void 0:s.promise),this._storeAdapter.update(t)}async waitForTransition(){var t;await((t=this._transitionPromise)==null?void 0:t.promise)}addStoreData(t){this._storeStates.push({current:t.getState(),prev:t.getPrevState()})}getStoreData(t=!1){return t?this._storeStates.pop():this._storeStates.shift()}canTransit(t,e,s){const r=this._states.get(t);if(!r||!r.transitions)return null;for(const i of r.transitions)if(i.condition(e,s))return i.to;return null}async processTransition(){var s;const t=this.getStoreData();if(!t)return;const e=this.canTransit(this._currentState,t.current,t.prev);e&&(this._transitionPromise=new a.DeferredPromise,await this.transition(this._currentState,e,this._currentStateData,t),this._currentStateData=t,(s=this._transitionPromise)==null||s.resolve())}async transition(t,e,s,r){const i=this._states.get(t),o=this._states.get(e);if(!i||!o)throw new Error(`State '${t}' or '${e}' not found`);this.processOnExit(t,s),await this.processOnEnter(e,t,r),o.subStates&&o.subStates.start()}processOnExit(t,e){var c;const s=this._states.get(t);if(!s)throw new Error(`State '${t}' not found`);if(!s.onExit)return;const r={fsmName:this._name,from:t,to:"",data:e},i=`[FSM][onExit] In ${this._name} from ${t}}`,o=this._executionController.create(s.onExit,r,i);(c=this._hooks)!=null&&c.onExit&&this._hooks.onExit(r),this._executionController.run(o,!1)}async processOnEnter(t,e,s){var c;const r=this._states.get(t);if(!r)throw new Error(`State '${t}' not found`);if(!r.onEnter)return;const i={fsmName:this._name,from:e,to:t,data:s},o=`[FSM][onEnter] In ${this._name} from ${e} to ${t}`;this._currentExecutionId=this._executionController.create(r.onEnter,i,o),this._currentState=t,(c=this._hooks)!=null&&c.onEnter&&this._hooks.onEnter(i),await this._executionController.run(this._currentExecutionId)}}class _{constructor(t){this.store=t,this._unsubscribeFn=()=>{}}getState(){return this.store.cloneState()}getPrevState(){return this.store.clonePrevState()}update(t){this.store.update(t)}subscribe(t){return this._unsubscribeFn=this.store.subscribe(t),this._unsubscribeFn}unsubscribe(){this._unsubscribeFn()}}class p{create(t){const e=new S.Store(t);return new _(e)}}n.EmpressStoreAdapter=_,n.EmpressStoreFactory=p,n.FSM=d,n.TransitionStrategy=u,Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});
